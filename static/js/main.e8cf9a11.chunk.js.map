{"version":3,"sources":["Colum.js","App.js","index.js"],"names":["Colum","data","ydim","margin","xdata","ydata","canvas","useRef","useEffect","svg","d3","current","addAxes","addBars","addText","xAxis","xscale","append","call","attr","selectAll","yAxis","yscale","linearScale","domain","map","d","sales","range","scaleYData","vals","enter","bandwidth","i","month","text","padding","className","viewBox","preserveAspectRatio","width","height","ref","App","rend","useState","subm","submitted","oldvalue","newvalue","submit","e","type","placeholder","value","onChange","target","onClick","JSON","parse","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e8cf9a11.chunk.js","sourcesContent":["import React,{useEffect, useRef} from 'react'\r\nimport './App.css'\r\nimport * as d3 from 'd3'\r\n\r\n\r\n\r\nconst Colum =(data)=>{\r\n    let xdim=750\r\n    let ydim=500\r\n    let margin={top:80 ,bottom:80, left:120, right:120}\r\n  \r\n    \r\n    let xdata=data\r\n\r\n   \r\n    let ydata=data\r\n    const canvas = useRef(null)\r\n\r\n    useEffect(()=>{ \r\n\r\n        const svg = d3.select(canvas.current) \r\n        addAxes(svg);\r\n        addBars(svg);\r\n        addText(svg);\r\n\r\n        \r\n\r\n    })\r\n\r\n\r\n\r\n    const addAxes=(svg)=>{\r\n      \r\n        const xAxis= d3.axisBottom(xscale);\r\n\r\n        svg.append(\"g\")\r\n            .call(xAxis)\r\n            .attr(\"transform\",`translate(0, ${ydim})`)\r\n            .selectAll(\"text\")\r\n            .attr(\"text-anchor\",\"start\")\r\n            .attr(\"transform\",\"rotate(45)\")\r\n            .attr(\"color\",\"white\")\r\n            .attr(\"font-size\",15)\r\n\r\n     \r\n\r\n        const yAxis = d3.axisLeft(yscale)\r\n\r\n        svg.append(\"g\")\r\n            .call(yAxis)\r\n            .attr(\"transform\",`translate(${margin.left},0)`)\r\n            .attr(\"color\",\"white\")\r\n            .attr(\"font-size\",15)\r\n\r\n    }\r\n\r\n    const addBars =(svg)=>{\r\n        const linearScale = d3.scaleLinear()\r\n        .domain([0,d3.max(ydata.data.map(d=>(d.sales)))])\r\n        .range([0,ydim])\r\n        \r\n\r\n        const scaleYData = ydata.data.map(vals=>{\r\n            return linearScale(vals.sales)\r\n        })\r\n        // console.log(scaleYData)\r\n        svg.selectAll(\"rect\")\r\n        .data(scaleYData)\r\n        .enter()\r\n        .append(\"rect\")\r\n        .attr(\"width\",xscale.bandwidth())\r\n        .attr(\"height\",(d)=>{\r\n            return d \r\n        })\r\n        .attr(\"x\",(d,i)=>{\r\n            return xscale(xdata.data.map(d=>(d.month))[i])\r\n        })\r\n        .attr(\"y\",(d)=>{\r\n            return ydim -d\r\n        })\r\n        .attr(\"fill\",\"dodgerblue\")\r\n        .attr(\"stroke\",\"white\")\r\n    }\r\n\r\n    const addText=(svg)=>{\r\n        svg.append(\"text\")\r\n        .text(\"Chart of Sales\")\r\n        .attr(\"x\",(margin.left+ margin.right+xdim)/2)\r\n        .attr(\"y\",(margin.top -150)/1)\r\n        .attr(\"fill\",\"white\")\r\n        .attr(\"font-size\",20)\r\n\r\n\r\n        // svg.append(\"text\")\r\n        // .text(\"weeek data\") \r\n        // .attr(\"text-anchor\",\"middle\")\r\n        // .attr(\"x\",-(margin.top+margin.bottom+ydim)/3)\r\n        // .attr(\"y\",margin.left/2)\r\n        // .attr(\"transform\",`rotate(-90,${margin.left/2}, ${margin.top/2})`)\r\n       \r\n        \r\n    }\r\n\r\n    const xscale = d3.scaleBand()\r\n    .domain(xdata.data.map(d=>(d.month)))\r\n    .range([margin.left,xdim +margin.left])\r\n    .padding(0.2)\r\n\r\n    const yscale= d3.scaleLinear()\r\n    .domain([0,d3.max(ydata.data.map(d=>(d.sales)))])\r\n    .range([ydim,0])\r\n   \r\n    \r\n \r\n    return(\r\n        <>\r\n            <div className=\"canvas\">\r\n            <svg viewBox={`0 0 ${xdim +margin.left+ margin.right} ${ydim+ \r\n                margin.top + margin.bottom}`} preserveAspectRatio=\"xMinYmin\" width=\"100%\" height=\"100%\" ref={canvas}>\r\n            </svg>\r\n            </div>\r\n        </>\r\n    )\r\n    \r\n\r\n}\r\nexport default Colum\r\n\r\n\r\n","import React, { useState } from 'react'\nimport './App.css'\nimport Colum from './Colum'\n\n\nconst App =()=>{\n  let rend=false\n  const [subm,submitted] = useState(rend)\n  \n  const [oldvalue, newvalue] = useState(\"\")\n\n  // const [sub,newsub] = useState(\"\")\n  // let SAMPLE_JSON = []\n\n\n  \n  const submit=(e)=>{\n    // newsub(oldvalue)\n    // SAMPLE_JSON = JSON.parse(oldvalue)\n    submitted(rend=true)\n  \n  }\n\n \n  \n\n  if(subm===false)\n  {\n    return(\n      <>\n  \n      <h1 className=\"head\">Paste the json </h1>\n      <textarea type=\"textarea\" placeholder=\"paste the json\" value={oldvalue} onChange={(e)=>newvalue(e.target.value)} className=\"area\" ></textarea>\n  \n      <button className=\"butt\" onClick={submit}>Submit</button>\n    \n   \n      </>\n    )\n  }\n  else{\n    return(\n      <>\n      <h1 className=\"head\">Paste the json </h1>\n      <textarea type=\"textarea\" placeholder=\"paste the json\" value={oldvalue} onChange={(e)=>newvalue(e.target.value)} className=\"area\" ></textarea>\n   \n      <button  className=\"butt\"  onClick={submit}>Submit</button>\n      <Colum  data={JSON.parse(oldvalue)}/> \n     \n      \n      </>\n    )\n\n  }\n\n  \n \n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <App />,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}